from typing import Dict, Any
from pydantic import BaseModel
import os
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Initialize OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Prepare system prompt template
SYSTEM_PROMPT = """
You are an expert astrologer with deep knowledge of astrological principles, planetary positions, houses, and aspects. 
Your task is to provide an insightful and personalized astrological reading based on the birth chart data provided.

The reading should include:
1. A warm introduction addressing the person by name
2. Analysis of key planetary positions and their significance
3. Interpretations of important aspects between planets
4. House placements and their meaning in the person's life
5. Overall themes and patterns in the chart
6. Potential strengths, challenges, and opportunities

Your tone should be supportive, insightful, and empowering. Avoid definitive predictions about specific events, and instead focus on tendencies, potentials, and patterns.

Format the reading with clear sections, using markdown formatting for headings and emphasis where appropriate.
"""

# Prepare user prompt template
USER_PROMPT_TEMPLATE = """
Please provide an astrological reading for {name}, born on {birth_date} in {birth_city}, {birth_country}.

Here is their birth chart data:

Planetary Positions:
{planets_text}

House Placements:
{houses_text}

Key Aspects:
{aspects_text}

Please create a detailed and personalized astrological reading based on this chart.
"""

def format_planets_text(planets):
    """Format planets data as text for the prompt"""
    result = ""
    for planet in planets:
        retrograde = " (Retrograde)" if planet.get("retrograde") else ""
        house_info = f" in House {planet['house']}" if planet.get("house") else ""
        result += f"- {planet['name']}: {planet['sign']} at {planet['degrees']:.2f}°{retrograde}{house_info}\n"
    return result

def format_houses_text(houses):
    """Format houses data as text for the prompt"""
    if not houses:
        return "No house data available (exact birth time may not have been provided)."
    
    result = ""
    for house in houses:
        result += f"- House {house['house']}: {house['sign']} ({house['degrees']:.2f}°)\n"
    return result

def format_aspects_text(aspects):
    """Format aspects data as text for the prompt"""
    if not aspects:
        return "No major aspects data available."
    
    result = ""
    # Only include major aspects (conjunction, opposition, trine, square, sextile)
    major_aspects = [a for a in aspects if a["aspect"] in ["Conjunction", "Opposition", "Trine", "Square", "Sextile"]]
    
    # Limit to 10 most significant aspects
    significant_aspects = sorted(major_aspects, key=lambda x: abs(x["orb"]))[:10]
    
    for aspect in significant_aspects:
        result += f"- {aspect['planet1']} {aspect['aspect']} {aspect['planet2']} (orb: {aspect['orb']:.2f}°)\n"
    return result

def generate_reading(birth_data: BaseModel, chart_data: Dict[str, Any]) -> str:
    """Generate an astrological reading using GPT-4o"""
    # Format the data for the prompt
    planets_text = format_planets_text(chart_data["planets"])
    houses_text = format_houses_text(chart_data["houses"] or [])
    aspects_text = format_aspects_text(chart_data["aspects"] or [])
    
    # Create the user prompt
    user_prompt = USER_PROMPT_TEMPLATE.format(
        name=birth_data.name,
        birth_date=birth_data.birth_date,
        birth_city=birth_data.birth_city,
        birth_country=birth_data.birth_country,
        planets_text=planets_text,
        houses_text=houses_text,
        aspects_text=aspects_text
    )
    
    # Call GPT-4o API
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            temperature=0.7,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_prompt}
            ]
        )
        
        return response.choices[0].message.content
    except Exception as e:
        # For development/demo, return a placeholder if the API call fails
        print(f"Error calling OpenAI API: {str(e)}")
        return f"# Astrological Reading for {birth_data.name}\n\nThis is a placeholder reading. In production, this would be generated by GPT-4o based on your birth chart data."
